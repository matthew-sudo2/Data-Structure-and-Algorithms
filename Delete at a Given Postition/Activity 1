class Node {
    Object data; 
    Node next;

    public Node(Object value) {
        this.data = value;
        this.next = null;
    }
}

class LinkedList {
    static Node head;
    static int lastDeletedPosition = -1;

    static void insertAtBegin(Object data) {
        Node matt = new Node(data);
        matt.next = head;
        head = matt;
    }

    static void deleteatbegin() {
        if (head != null) {
            head = head.next;
        }
    }

    static void deleteAtPosition(int position) {
        if (head == null) {
            System.out.println("List is empty. Nothing to delete.");
            lastDeletedPosition = -1;
            return;
        }

        Node current = head;
        int count = 0;

        while (current != null && count < position) {
            current = current.next;
            count++;
        }

        if (current == null) {
            System.out.println("Invalid position. No node deleted.");
            lastDeletedPosition = -1;
            return;
        }
        current.data = 0;
        lastDeletedPosition = position;
    }

    static void deleteatend() {
        if (head == null) return;

        if (head.next == null) {
            head = null;
            return;
        }

        Node secondLast = head;
        while (secondLast.next.next != null) {
            secondLast = secondLast.next;
        }
        secondLast.next = null;
    }

    static void insertAtPosition(Object data, int position) {
        Node newNode = new Node(data);

        if (position == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }

        Node current = head;
        int count = 0;

        while (current != null && count < position - 1) {
            current = current.next;
            count++;
        }

        if (current == null) {
            System.out.println("Position out of bounds");
            return;
        }

        newNode.next = current.next;
        current.next = newNode;
    }
    
    static void setAtPosition(Object data, int position) {
    if (head == null) {
        System.out.println("List is empty. Cannot set value.");
        return;
    }
    Node current = head;
    int count = 0;
    while (current != null && count < position) {
        current = current.next;
        count++;
    }
    if (current == null) {
        System.out.println("Position out of bounds. Cannot set value.");
        return;
    }
    
    current.data = data;
}

    static void sortAscending() {
        if (head == null || head.next == null) {
            return;
        }

        boolean swapped;
        do {
            swapped = false;
            Node current = head;

            while (current.next != null) {
                if (compare(current.data, current.next.data) > 0) {
                    Object temp = current.data;
                    current.data = current.next.data;
                    current.next.data = temp;
                    swapped = true;
                }
                current = current.next;
            }
        } while (swapped);
    }

    static int compare(Object a, Object b) {
        if (a instanceof Integer && b instanceof Integer) {
            return ((Integer) a) - ((Integer) b);  
        } else if (a instanceof Integer && b instanceof String) {
            if ((Integer) a == 0) return 1; 
            return 1;  
        } else if (a instanceof String && b instanceof Integer) {
            if ((Integer) b == 0) return -1; 
            return -1;  
        } else if (a instanceof String && b instanceof String) {
            return ((String) a).compareTo((String) b);
        }
        return 0; 
    }

    static void printList() {
        Node current = head;
        System.out.print("[");
        boolean isFirst = true;
        while (current != null) {
            if (!isFirst) {
                System.out.print(", ");
            }
            System.out.print(current.data);
            isFirst = false;
            current = current.next;
        }
        System.out.println("]");
    }
}

public class Main {
    public static void main(String args[]) {
        LinkedList.insertAtBegin(12);
        LinkedList.insertAtBegin(22);
        LinkedList.insertAtBegin(30);
        LinkedList.insertAtBegin(44);
        LinkedList.insertAtBegin(50);
        LinkedList.insertAtBegin(33);

        System.out.print("Linked List: ");
        LinkedList.printList();

        LinkedList.deleteatbegin();
        System.out.print("Linked list after deletion: ");
        LinkedList.printList();

        LinkedList.deleteatend();
        System.out.print("Linked list after deletion at end: ");
        LinkedList.printList();
        
        LinkedList.deleteAtPosition(1);
        System.out.print("Linked list after deletion: ");
        LinkedList.printList();
        
        LinkedList.sortAscending();
        System.out.print("Sorted Ascending: ");
        LinkedList.printList();
        
        LinkedList.sortAscending();
        LinkedList.insertAtPosition("Matthew", 3);
        System.out.print("Linked list after name insertion: ");
        LinkedList.printList();
        
        LinkedList.setAtPosition("LJ", 0);
        System.out.print("Linked list after nickname set: ");
        LinkedList.printList();

    }
}
